diff --git a/desktop/patches/builder-util+23.0.2.patch b/desktop/patches/builder-util+23.0.2.patch
new file mode 100644
index 000000000..1bc1bf82e
--- /dev/null
+++ b/desktop/patches/builder-util+23.0.2.patch
@@ -0,0 +1,51 @@
+diff --git a/node_modules/builder-util/out/arch.js b/node_modules/builder-util/out/arch.js
+index eabcf47..6accb1c 100644
+--- a/node_modules/builder-util/out/arch.js
++++ b/node_modules/builder-util/out/arch.js
+@@ -8,6 +8,7 @@ var Arch;
+     Arch[Arch["armv7l"] = 2] = "armv7l";
+     Arch[Arch["arm64"] = 3] = "arm64";
+     Arch[Arch["universal"] = 4] = "universal";
++    Arch[Arch["ppc64"] = 5] = "ppc64";
+ })(Arch = exports.Arch || (exports.Arch = {}));
+ function toLinuxArchString(arch, targetName) {
+     switch (arch) {
+@@ -19,13 +20,15 @@ function toLinuxArchString(arch, targetName) {
+             return targetName === "snap" || targetName === "deb" ? "armhf" : targetName === "flatpak" ? "arm" : "armv7l";
+         case Arch.arm64:
+             return targetName === "pacman" || targetName === "flatpak" ? "aarch64" : "arm64";
++        case Arch.ppc64:
++            return "ppc64";
+         default:
+             throw new Error(`Unsupported arch ${arch}`);
+     }
+ }
+ exports.toLinuxArchString = toLinuxArchString;
+ function getArchCliNames() {
+-    return [Arch[Arch.ia32], Arch[Arch.x64], Arch[Arch.armv7l], Arch[Arch.arm64]];
++    return [Arch[Arch.ia32], Arch[Arch.x64], Arch[Arch.armv7l], Arch[Arch.arm64], Arch[Arch.ppc64]];
+ }
+ exports.getArchCliNames = getArchCliNames;
+ function getArchSuffix(arch, defaultArch) {
+@@ -44,6 +47,8 @@ function archFromString(name) {
+             return Arch.armv7l;
+         case "universal":
+             return Arch.universal;
++        case "ppc64":
++            return Arch.ppc64;
+         default:
+             throw new Error(`Unsupported arch ${name}`);
+     }
+diff --git a/node_modules/builder-util/out/util.js b/node_modules/builder-util/out/util.js
+index adfe1cd..043ad5a 100644
+--- a/node_modules/builder-util/out/util.js
++++ b/node_modules/builder-util/out/util.js
+@@ -2,7 +2,7 @@
+ Object.defineProperty(exports, "__esModule", { value: true });
+ exports.retry = exports.executeAppBuilder = exports.InvalidConfigurationError = exports.isEnvTrue = exports.isPullRequest = exports.getPlatformIconFileName = exports.replaceDefault = exports.addValue = exports.isTokenCharValid = exports.isEmptyOrSpaces = exports.use = exports.ExecError = exports.spawn = exports.spawnAndWrite = exports.doSpawn = exports.exec = exports.removePassword = exports.serializeToYaml = exports.debug7z = exports.deepAssign = exports.asArray = exports.exists = exports.copyFile = exports.DebugLogger = exports.AsyncTaskManager = exports.defaultArchFromString = exports.archFromString = exports.getArchSuffix = exports.toLinuxArchString = exports.getArchCliNames = exports.Arch = exports.debug = exports.log = exports.TmpDir = exports.safeStringifyJson = void 0;
+ const _7zip_bin_1 = require("7zip-bin");
+-const app_builder_bin_1 = require("app-builder-bin");
++const app_builder_bin_1 = {appBuilderPath: "/usr/bin/app-builder"};
+ const builder_util_runtime_1 = require("builder-util-runtime");
+ const chalk = require("chalk");
+ const child_process_1 = require("child_process");
