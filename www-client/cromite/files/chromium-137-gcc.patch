--- a/base/synchronization/lock_impl_posix.cc
+++ b/base/synchronization/lock_impl_posix.cc
@@ -20,6 +20,7 @@
 #include "base/system/sys_info.h"
 #include "build/build_config.h"
 
+#if BUILDFLAG(IS_ANDROID)
 // On Android, `pthread_mutexattr_setprotocol()` is only defined in bionic
 // starting with API level 28. Make it a weak import, so that we can compile.
 extern "C" {
@@ -27,6 +28,7 @@ int __attribute__((weak)) pthread_mutexa
     pthread_mutexattr_t* _Nonnull __attr,
     int __protocol);
 }
+#endif
 
 namespace base {
 
--- a/chrome/browser/ui/views/frame/contents_web_view.h
+++ b/chrome/browser/ui/views/frame/contents_web_view.h
@@ -14,6 +14,8 @@
 #include "ui/base/metadata/metadata_header_macros.h"
 #include "ui/gfx/geometry/rounded_corners_f.h"
 #include "ui/views/controls/webview/webview.h"
+#include "chrome/browser/ui/views/status_bubble_views.h"
+#include "chrome/browser/ui/views/frame/web_contents_close_handler.h"
 
 class StatusBubbleViews;
 class WebContentsCloseHandler;
--- a/content/browser/webid/federated_auth_request_impl.cc
+++ b/content/browser/webid/federated_auth_request_impl.cc
@@ -1602,7 +1602,7 @@ void FederatedAuthRequestImpl::OnFetchDa
       idp_info->rp_context, disclosure_fields,
       /*has_login_status_mismatch=*/false);
   for (auto& account : accounts) {
-    account->identity_provider = idp_info->data;
+    account->identity_provider = idp_info->data.get();
   }
   // If the IDP data existed before, we need to remove the old accounts data.
   // This can happen with the 'use other account' feature.
@@ -1822,7 +1822,7 @@ void FederatedAuthRequestImpl::MaybeShow
       accounts_ = {auto_reauthn_account};
       idp_data_for_display_ = {auto_reauthn_idp};
       new_accounts_.clear();
-      accounts_[0]->identity_provider = idp_data_for_display_[0];
+      accounts_[0]->identity_provider = idp_data_for_display_[0].get();
     }
   }
 
--- a/content/public/browser/content_browser_client.cc
+++ b/content/public/browser/content_browser_client.cc
@@ -92,6 +92,7 @@
 #include "ui/shell_dialogs/select_file_policy.h"
 #include "url/gurl.h"
 #include "url/origin.h"
+#include "content/public/browser/web_ui_controller.h"
 
 #if BUILDFLAG(IS_ANDROID)
 #include "content/public/browser/tts_environment_android.h"
--- a/content/public/browser/identity_request_account.h
+++ b/content/public/browser/identity_request_account.h
@@ -70,7 +70,7 @@ class CONTENT_EXPORT IdentityRequestAcco
 
   // The identity provider to which the account belongs to. This is not set in
   // the constructor but instead set later.
-  scoped_refptr<IdentityProviderData> identity_provider = nullptr;
+  IdentityProviderData* identity_provider = nullptr;
 
   std::string id;
   // E.g. email or phone number
--- a/device/fido/cable/cable_discovery_data.cc
+++ b/device/fido/cable/cable_discovery_data.cc
@@ -118,8 +118,8 @@ Pairing::~Pairing() = default;
 std::optional<std::unique_ptr<Pairing>> Pairing::Parse(
     const cbor::Value& cbor,
     tunnelserver::KnownDomainID domain,
-    base::span<const uint8_t, kQRSeedSize> local_identity_seed,
-    base::span<const uint8_t, 32> handshake_hash) {
+    std::span<const uint8_t, kQRSeedSize> local_identity_seed,
+    std::span<const uint8_t, 32> handshake_hash) {
   if (!cbor.is_map()) {
     return std::nullopt;
   }
--- a/device/fido/cable/cable_discovery_data.h
+++ b/device/fido/cable/cable_discovery_data.h
@@ -141,8 +141,8 @@ struct COMPONENT_EXPORT(DEVICE_FIDO) Pai
   static std::optional<std::unique_ptr<Pairing>> Parse(
       const cbor::Value& cbor,
       tunnelserver::KnownDomainID domain,
-      base::span<const uint8_t, kQRSeedSize> local_identity_seed,
-      base::span<const uint8_t, 32> handshake_hash);
+      std::span<const uint8_t, kQRSeedSize> local_identity_seed,
+      std::span<const uint8_t, 32> handshake_hash);
 
   static bool CompareByMostRecentFirst(const std::unique_ptr<Pairing>&,
                                        const std::unique_ptr<Pairing>&);
--- a/net/base/pickle_traits.h
+++ b/net/base/pickle_traits.h
@@ -563,7 +563,7 @@ struct PickleTraits<T> {
   }
 
   static constexpr std::make_index_sequence<std::tuple_size_v<T>>
-      kIndexSequence;
+      kIndexSequence{};
 };
 
 // bool is treated specially by base::Pickle.
--- a/services/network/public/cpp/ad_auction/event_record.cc
+++ b/services/network/public/cpp/ad_auction/event_record.cc
@@ -47,16 +47,16 @@ std::optional<std::string> ParseEventTyp
 std::optional<std::vector<url::Origin>> ParseEligibleOrigins(
     const net::structured_headers::Dictionary& dict) {
   const auto it = dict.find("eligible-origins");
+  std::vector<url::Origin> result;
   if (it == dict.end()) {
     // "eligible-origins" is optional, so just return an empty list.
-    return {{}};
+    return {result};
   }
   const net::structured_headers::ParameterizedMember& parameterized_member =
       it->second;
   if (!parameterized_member.member_is_inner_list) {
     return std::nullopt;
   }
-  std::vector<url::Origin> result;
   for (const net::structured_headers::ParameterizedItem& parameterized_item :
        parameterized_member.member) {
     if (!parameterized_item.item.is_string()) {
--- a/third_party/angle/src/libANGLE/renderer/vulkan/vk_cache_utils.h
+++ b/third_party/angle/src/libANGLE/renderer/vulkan/vk_cache_utils.h
@@ -3011,7 +3011,7 @@ class UpdateDescriptorSetsBuilder final
             mCurrentVector = mDescriptorInfos.begin();
             mTotalSize     = 0;
         }
-        T *allocate(uint32_t count);
+        __attribute__((__used__)) T *allocate(uint32_t count);
 
         bool empty() const { return mTotalSize == 0; }
 
--- a/third_party/blink/renderer/core/css/css_shape_value.h
+++ b/third_party/blink/renderer/core/css/css_shape_value.h
@@ -96,7 +96,7 @@ using CSSShapeControlPoint = std::pair<C
 template <wtf_size_t NumControlPoints>
 class CSSShapeCurveCommand : public CSSShapeCommand {
  public:
-  CSSShapeCurveCommand<1>(Type type,
+  CSSShapeCurveCommand(Type type,
                           const CSSValuePair& end_point,
                           const CSSShapeControlPoint control_point)
       : CSSShapeCommand(type, end_point), control_points_{control_point} {}
--- a/third_party/blink/renderer/core/layout/physical_box_fragment.h
+++ b/third_party/blink/renderer/core/layout/physical_box_fragment.h
@@ -167,7 +167,7 @@ class CORE_EXPORT PhysicalBoxFragment fi
            !Style().ShouldIgnoreOverflowPropertyForInlineBlockBaseline();
   }
 
-  const GapGeometry* GapGeometry() const {
+  const blink::GapGeometry* GapGeometry() const {
     return rare_data_ ? rare_data_->gap_geometry_.Get() : nullptr;
   }
 
--- a/third_party/blink/renderer/core/offscreencanvas/offscreen_canvas.h
+++ b/third_party/blink/renderer/core/offscreencanvas/offscreen_canvas.h
@@ -24,6 +24,7 @@
 #include "third_party/blink/renderer/platform/heap/garbage_collected.h"
 #include "third_party/blink/renderer/platform/heap/prefinalizer.h"
 #include "ui/gfx/geometry/size.h"
+#include "third_party/blink/renderer/platform/text/layout_locale.h"
 
 namespace blink {
 
--- a/third_party/blink/renderer/modules/xr/xr_webgl_swap_chain.h
+++ b/third_party/blink/renderer/modules/xr/xr_webgl_swap_chain.h
@@ -10,6 +10,7 @@
 #include "third_party/blink/renderer/modules/xr/xr_swap_chain.h"
 #include "third_party/blink/renderer/platform/heap/garbage_collected.h"
 #include "third_party/blink/renderer/platform/heap/member.h"
+#include "third_party/blink/renderer/platform/graphics/static_bitmap_image.h"
 
 namespace blink {
 
--- a/third_party/blink/renderer/platform/bindings/exception_state.h
+++ b/third_party/blink/renderer/platform/bindings/exception_state.h
@@ -133,7 +133,7 @@ class PLATFORM_EXPORT ExceptionState {
   // Delegated constructor for DummyExceptionStateForTesting
   explicit ExceptionState(DummyExceptionStateForTesting& dummy_derived);
 
-  static constexpr ExceptionContext kEmptyContext;
+  static constexpr ExceptionContext kEmptyContext{};
 
  private:
   void SetExceptionInfo(ExceptionCode, const String&);
--- a/third_party/blink/renderer/platform/fonts/string_truncator.cc
+++ b/third_party/blink/renderer/platform/fonts/string_truncator.cc
@@ -126,7 +126,7 @@ static String TruncateString(const Strin
   if (string.length() > STRING_BUFFER_SIZE) {
     keep_count = STRING_BUFFER_SIZE - 1;  // need 1 character for the ellipsis
     truncated_string =
-        CenterTruncateToBuffer(string, keep_count, string_buffer);
+        CenterTruncateToBuffer(string, keep_count, base::span(string_buffer));
   } else {
     keep_count = string.length();
     auto string_buffer_piece = base::span(string_buffer).first(keep_count);
@@ -171,7 +171,7 @@ static String TruncateString(const Strin
     DCHECK_LT(keep_count, keep_count_for_smallest_known_to_not_fit);
     DCHECK_GT(keep_count, keep_count_for_largest_known_to_fit);
 
-    truncated_string = truncate_to_buffer(string, keep_count, string_buffer);
+    truncated_string = truncate_to_buffer(string, keep_count, base::span(string_buffer));
 
     width = StringWidth(font, truncated_string);
     if (width <= max_width) {
@@ -188,7 +188,7 @@ static String TruncateString(const Strin
 
   if (keep_count != keep_count_for_largest_known_to_fit) {
     keep_count = keep_count_for_largest_known_to_fit;
-    truncated_string = truncate_to_buffer(string, keep_count, string_buffer);
+    truncated_string = truncate_to_buffer(string, keep_count, base::span(string_buffer));
   }
 
   return String(truncated_string);
--- a/third_party/blink/renderer/platform/graphics/filters/fe_color_matrix.cc
+++ b/third_party/blink/renderer/platform/graphics/filters/fe_color_matrix.cc
@@ -123,7 +123,7 @@ static sk_sp<cc::ColorFilter> CreateColo
       break;
     case FECOLORMATRIX_TYPE_MATRIX: {
       if (values.size() == kColorMatrixSize) {
-        base::span(matrix).copy_from(values);
+        base::span(std::span(matrix)).copy_from(values);
       }
       break;
     }
--- a/third_party/blink/renderer/platform/wtf/text/string_concatenate.h
+++ b/third_party/blink/renderer/platform/wtf/text/string_concatenate.h
@@ -45,7 +45,7 @@ class StringTypeAdapter<char> {
   DISALLOW_NEW();
 
  public:
-  explicit StringTypeAdapter<char>(char buffer) : buffer_(buffer) {}
+  explicit StringTypeAdapter(char buffer) : buffer_(buffer) {}
 
   size_t length() const { return 1; }
   bool Is8Bit() const { return true; }
@@ -64,7 +64,7 @@ class StringTypeAdapter<char> {
 template <>
 class StringTypeAdapter<LChar> : public StringTypeAdapter<char> {
  public:
-  explicit StringTypeAdapter<LChar>(LChar buffer)
+  explicit StringTypeAdapter(LChar buffer)
       : StringTypeAdapter<char>(buffer) {}
 };
 
@@ -73,7 +73,7 @@ class StringTypeAdapter<UChar> {
   DISALLOW_NEW();
 
  public:
-  explicit StringTypeAdapter<UChar>(UChar buffer) : buffer_(buffer) {}
+  explicit StringTypeAdapter(UChar buffer) : buffer_(buffer) {}
 
   size_t length() const { return 1; }
   bool Is8Bit() const { return buffer_ <= 0xff; }
@@ -96,7 +96,7 @@ class WTF_EXPORT StringTypeAdapter<const
   DISALLOW_NEW();
 
  public:
-  explicit StringTypeAdapter<const char*>(const char* buffer)
+  explicit StringTypeAdapter(const char* buffer)
       : buffer_(base::as_byte_span(std::string_view(buffer))) {}
 
   size_t length() const { return buffer_.size(); }
@@ -113,7 +113,7 @@ template <>
 class WTF_EXPORT StringTypeAdapter<const LChar*>
     : StringTypeAdapter<const char*> {
  public:
-  explicit StringTypeAdapter<const LChar*>(const LChar* buffer)
+  explicit StringTypeAdapter(const LChar* buffer)
       : StringTypeAdapter<const char*>(reinterpret_cast<const char*>(buffer)) {}
 };
 
@@ -121,7 +121,7 @@ template <>
 class WTF_EXPORT StringTypeAdapter<char*>
     : public StringTypeAdapter<const char*> {
  public:
-  explicit StringTypeAdapter<char*>(char* buffer)
+  explicit StringTypeAdapter(char* buffer)
       : StringTypeAdapter<const char*>(buffer) {}
 };
 
@@ -129,7 +129,7 @@ template <>
 class WTF_EXPORT StringTypeAdapter<LChar*>
     : public StringTypeAdapter<const LChar*> {
  public:
-  explicit StringTypeAdapter<LChar*>(LChar* buffer)
+  explicit StringTypeAdapter(LChar* buffer)
       : StringTypeAdapter<const LChar*>(buffer) {}
 };
 
--- a/third_party/blink/renderer/platform/wtf/text/string_view.h
+++ b/third_party/blink/renderer/platform/wtf/text/string_view.h
@@ -20,6 +20,7 @@
 #include "third_party/blink/renderer/platform/wtf/allocator/allocator.h"
 #include "third_party/blink/renderer/platform/wtf/get_ptr.h"
 #include "third_party/blink/renderer/platform/wtf/text/string_impl.h"
+#include "third_party/blink/renderer/platform/wtf/text/code_point_iterator.h"
 
 #if DCHECK_IS_ON()
 #include "base/memory/scoped_refptr.h"
--- a/third_party/perfetto/src/tracing/internal/tracing_muxer_fake.cc
+++ b/third_party/perfetto/src/tracing/internal/tracing_muxer_fake.cc
@@ -27,13 +27,11 @@ PERFETTO_NORETURN void FailUninitialized
 
 }  // namespace
 
-#if PERFETTO_HAS_NO_DESTROY()
 // static
 PERFETTO_NO_DESTROY TracingMuxerFake::FakePlatform
     TracingMuxerFake::FakePlatform::instance{};
 // static
 PERFETTO_NO_DESTROY TracingMuxerFake TracingMuxerFake::instance{};
-#endif  // PERFETTO_HAS_NO_DESTROY()
 
 TracingMuxerFake::~TracingMuxerFake() = default;
 
--- a/third_party/perfetto/src/tracing/internal/tracing_muxer_fake.h
+++ b/third_party/perfetto/src/tracing/internal/tracing_muxer_fake.h
@@ -44,11 +44,7 @@ class TracingMuxerFake : public TracingM
   ~TracingMuxerFake() override;
 
   static constexpr TracingMuxerFake* Get() {
-#if PERFETTO_HAS_NO_DESTROY()
     return &instance;
-#else
-    return nullptr;
-#endif
   }
 
   // TracingMuxer implementation.
--- a/ui/accessibility/platform/ax_platform_node_id.h
+++ b/ui/accessibility/platform/ax_platform_node_id.h
@@ -57,7 +57,7 @@ class AXPlatformNodeId
 
 namespace std {
 template <>
-struct std::hash<ui::AXPlatformNodeId>
-    : std::hash<base::StrongAlias<class ui::AXPlatformNodeIdTag, int32_t>> {};
+struct hash<ui::AXPlatformNodeId>
+    : hash<base::StrongAlias<class ui::AXPlatformNodeIdTag, int32_t>> {};
 }  // namespace std
 #endif  // UI_ACCESSIBILITY_PLATFORM_AX_PLATFORM_NODE_ID_H_
