diff -r -u chromium-120.0.6099.129old/chrome/browser/ui/web_applications/diagnostics/web_app_icon_diagnostic.cc chromium-120.0.6099.129/chrome/browser/ui/web_applications/diagnostics/web_app_icon_diagnostic.cc
--- chromium-120.0.6099.129old/chrome/browser/ui/web_applications/diagnostics/web_app_icon_diagnostic.cc	2023-12-21 01:48:57.497598400 +0100
+++ chromium-120.0.6099.129/chrome/browser/ui/web_applications/diagnostics/web_app_icon_diagnostic.cc	2023-12-21 18:25:13.975084961 +0100
@@ -37,7 +37,7 @@
   if (!downloaded_icon_sizes.empty())
     icon_size_ = *downloaded_icon_sizes.begin();
 
-  result_.emplace();
+  result_.emplace(web_app::WebAppIconDiagnostic::Result{});
   result_->has_empty_downloaded_icon_sizes = downloaded_icon_sizes.empty();
   result_->has_generated_icon_flag = app_->is_generated_icon();
 
diff -r -u chromium-120.0.6099.129old/components/viz/service/display/surface_aggregator.cc chromium-120.0.6099.129/components/viz/service/display/surface_aggregator.cc
--- chromium-120.0.6099.129old/components/viz/service/display/surface_aggregator.cc	2023-12-21 01:49:05.646315300 +0100
+++ chromium-120.0.6099.129/components/viz/service/display/surface_aggregator.cc	2023-12-21 15:28:15.668850824 +0100
@@ -2228,7 +2228,7 @@
   root_surface_id_ = surface_id;
 
   // Start recording new stats for this aggregation.
-  stats_.emplace();
+  stats_.emplace(AggregateStatistics{});
 
   base::ElapsedTimer prewalk_timer;
   ResolvedFrameData* resolved_frame = GetResolvedFrame(surface_id);
diff -r -u chromium-120.0.6099.129old/gpu/command_buffer/service/shared_image/shared_image_backing.cc chromium-120.0.6099.129/gpu/command_buffer/service/shared_image/shared_image_backing.cc
--- chromium-120.0.6099.129old/gpu/command_buffer/service/shared_image/shared_image_backing.cc	2023-12-21 01:49:08.186538700 +0100
+++ chromium-120.0.6099.129/gpu/command_buffer/service/shared_image/shared_image_backing.cc	2023-12-21 15:59:04.210747172 +0100
@@ -343,7 +343,7 @@
 
 void SharedImageBacking::OnWriteSucceeded() {
   AutoLock auto_lock(this);
-  scoped_write_uma_.emplace();
+  scoped_write_uma_.emplace(gpu::SharedImageBacking::ScopedWriteUMA{});
 }
 
 size_t SharedImageBacking::GetEstimatedSize() const {
diff -r -u chromium-120.0.6099.129old/gpu/command_buffer/service/shared_image/shared_image_backing.h chromium-120.0.6099.129/gpu/command_buffer/service/shared_image/shared_image_backing.h
--- chromium-120.0.6099.129old/gpu/command_buffer/service/shared_image/shared_image_backing.h	2023-12-21 01:49:08.186538700 +0100
+++ chromium-120.0.6099.129/gpu/command_buffer/service/shared_image/shared_image_backing.h	2023-12-21 15:57:27.336515319 +0100
@@ -340,8 +340,8 @@
    public:
     ScopedWriteUMA() = default;
 
-    ScopedWriteUMA(const ScopedWriteUMA&) = delete;
-    ScopedWriteUMA& operator=(const ScopedWriteUMA&) = delete;
+    ScopedWriteUMA(const ScopedWriteUMA&) = default;
+    ScopedWriteUMA& operator=(const ScopedWriteUMA&) = default;
 
     ~ScopedWriteUMA() {
       UMA_HISTOGRAM_BOOLEAN("GPU.SharedImage.ContentConsumed",
diff -r -u chromium-120.0.6099.129old/mojo/public/cpp/bindings/lib/multiplex_router.cc chromium-120.0.6099.129/mojo/public/cpp/bindings/lib/multiplex_router.cc
--- chromium-120.0.6099.129old/mojo/public/cpp/bindings/lib/multiplex_router.cc	2023-12-21 01:49:10.754764600 +0100
+++ chromium-120.0.6099.129/mojo/public/cpp/bindings/lib/multiplex_router.cc	2023-12-21 13:19:27.412481231 +0100
@@ -870,7 +870,7 @@
   DCHECK(!exclusive_sync_wait_);
 
   scoped_refptr<MultiplexRouter> keep_alive(this);
-  exclusive_sync_wait_.emplace();
+  exclusive_sync_wait_.emplace(ExclusiveSyncWaitInfo{});
   exclusive_sync_wait_->interface_id = interface_id;
   exclusive_sync_wait_->request_id = request_id;
   while (!exclusive_sync_wait_->finished) {
Only in chromium-120.0.6099.129old: out
diff -r -u chromium-120.0.6099.129old/third_party/blink/renderer/core/loader/history_item.cc chromium-120.0.6099.129/third_party/blink/renderer/core/loader/history_item.cc
--- chromium-120.0.6099.129old/third_party/blink/renderer/core/loader/history_item.cc	2023-12-21 01:49:14.663108300 +0100
+++ chromium-120.0.6099.129/third_party/blink/renderer/core/loader/history_item.cc	2023-12-21 20:42:57.958387030 +0100
@@ -182,26 +182,26 @@
 
 void HistoryItem::SetVisualViewportScrollOffset(const ScrollOffset& offset) {
   if (!view_state_)
-    view_state_ = absl::make_optional<ViewState>();
+    view_state_.emplace(blink::HistoryItem::ViewState{});
   view_state_->visual_viewport_scroll_offset_ = offset;
 }
 
 void HistoryItem::SetScrollOffset(const ScrollOffset& offset) {
   if (!view_state_)
-    view_state_ = absl::make_optional<ViewState>();
+    view_state_.emplace(blink::HistoryItem::ViewState{});
   view_state_->scroll_offset_ = offset;
 }
 
 void HistoryItem::SetPageScaleFactor(float scale_factor) {
   if (!view_state_)
-    view_state_ = absl::make_optional<ViewState>();
+    view_state_.emplace(blink::HistoryItem::ViewState{});
   view_state_->page_scale_factor_ = scale_factor;
 }
 
 void HistoryItem::SetScrollAnchorData(
     const ScrollAnchorData& scroll_anchor_data) {
   if (!view_state_)
-    view_state_ = absl::make_optional<ViewState>();
+    view_state_.emplace(blink::HistoryItem::ViewState{});
   view_state_->scroll_anchor_data_ = scroll_anchor_data;
 }
 
diff -r -u chromium-120.0.6099.129old/third_party/blink/renderer/core/paint/fragment_data_iterator.h chromium-120.0.6099.129/third_party/blink/renderer/core/paint/fragment_data_iterator.h
--- chromium-120.0.6099.129old/third_party/blink/renderer/core/paint/fragment_data_iterator.h	2023-12-21 01:49:14.711112500 +0100
+++ chromium-120.0.6099.129/third_party/blink/renderer/core/paint/fragment_data_iterator.h	2023-12-21 20:29:18.456481304 +0100
@@ -21,7 +21,7 @@
 
  public:
   explicit FragmentDataIteratorBase(Head& head) : fragment_head_(head) {}
-  explicit FragmentDataIteratorBase(nullptr_t) {}
+  explicit FragmentDataIteratorBase(std::nullptr_t) {}
 
   Data* GetFragmentData() const {
     return !IsDone() ? &fragment_head_.at(idx_) : nullptr;
diff -r -u chromium-120.0.6099.129old/third_party/blink/renderer/modules/media_controls/elements/media_control_timeline_element.cc chromium-120.0.6099.129/third_party/blink/renderer/modules/media_controls/elements/media_control_timeline_element.cc
--- chromium-120.0.6099.129old/third_party/blink/renderer/modules/media_controls/elements/media_control_timeline_element.cc	2023-12-21 01:49:15.027140400 +0100
+++ chromium-120.0.6099.129/third_party/blink/renderer/modules/media_controls/elements/media_control_timeline_element.cc	2023-12-21 21:10:26.330108830 +0100
@@ -101,7 +101,7 @@
 void MediaControlTimelineElement::SetPosition(double current_time,
                                               bool suppress_aria) {
   if (is_live_ && !live_anchor_time_ && current_time != 0) {
-    live_anchor_time_.emplace();
+    live_anchor_time_.emplace(LiveAnchorTime{});
     live_anchor_time_->clock_time_ = base::TimeTicks::Now();
     live_anchor_time_->media_time_ = MediaElement().currentTime();
   }
diff -r -u chromium-120.0.6099.129old/third_party/blink/renderer/platform/graphics/paint/geometry_mapper_transform_cache.cc chromium-120.0.6099.129/third_party/blink/renderer/platform/graphics/paint/geometry_mapper_transform_cache.cc
--- chromium-120.0.6099.129old/third_party/blink/renderer/platform/graphics/paint/geometry_mapper_transform_cache.cc	2023-12-21 01:49:15.351168900 +0100
+++ chromium-120.0.6099.129/third_party/blink/renderer/platform/graphics/paint/geometry_mapper_transform_cache.cc	2023-12-21 21:37:22.972189479 +0100
@@ -70,7 +70,7 @@
     to_2d_translation_root_ += translation;
 
     if (parent.plane_root_transform_) {
-      plane_root_transform_.emplace();
+      plane_root_transform_.emplace(PlaneRootTransform{});
       plane_root_transform_->plane_root = parent.plane_root();
       plane_root_transform_->to_plane_root = parent.to_plane_root();
       plane_root_transform_->to_plane_root.Translate(translation.x(),
@@ -98,7 +98,7 @@
       // as the 2d translation root.
       plane_root_transform_ = absl::nullopt;
     } else {
-      plane_root_transform_.emplace();
+      plane_root_transform_.emplace(PlaneRootTransform{});
       plane_root_transform_->plane_root = parent.plane_root();
       plane_root_transform_->to_plane_root.MakeIdentity();
       parent.ApplyToPlaneRoot(plane_root_transform_->to_plane_root);
@@ -140,7 +140,7 @@
   parent_node->UpdateScreenTransform();
   const auto& parent = parent_node->GetTransformCache();
 
-  screen_transform_.emplace();
+  screen_transform_.emplace(ScreenTransform{});
   parent.ApplyToScreen(screen_transform_->to_screen);
   if (node.FlattensInheritedTransform())
     screen_transform_->to_screen.Flatten();
diff -r -u chromium-120.0.6099.129old/third_party/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc chromium-120.0.6099.129/third_party/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc
--- chromium-120.0.6099.129old/third_party/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc	2023-12-21 01:50:33.282024000 +0100
+++ chromium-120.0.6099.129/third_party/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc	2023-12-21 12:58:14.181419565 +0100
@@ -508,7 +508,7 @@
   if (!enabled.Get()) {
     return config;
   }
-  config.emplace();
+  config.emplace(Config{});
   config->bandwidth_rampup_upper_bound_factor =
       bandwidth_rampup_upper_bound_factor.Get();
   config->rampup_acceleration_max_factor = rampup_acceleration_max_factor.Get();
diff -r -u chromium-120.0.6099.129old/ui/gfx/x/generated_protos/randr.cc chromium-120.0.6099.129/ui/gfx/x/generated_protos/randr.cc
--- chromium-120.0.6099.129old/ui/gfx/x/generated_protos/randr.cc	2023-12-21 01:49:42.901592300 +0100
+++ chromium-120.0.6099.129/ui/gfx/x/generated_protos/randr.cc	2023-12-21 13:34:10.540992483 +0100
@@ -304,7 +304,7 @@
   // data
   auto data_expr = subCode;
   if (CaseEq(data_expr, RandR::Notify::CrtcChange)) {
-    data.cc.emplace();
+    data.cc.emplace(RandR::NotifyEvent::Cc{});
     auto& timestamp = (*data.cc).timestamp;
     auto& window = (*data.cc).window;
     auto& crtc = (*data.cc).crtc;
@@ -348,7 +348,7 @@
     Read(&height, &buf);
   }
   if (CaseEq(data_expr, RandR::Notify::OutputChange)) {
-    data.oc.emplace();
+    data.oc.emplace(RandR::NotifyEvent::Oc{});
     auto& timestamp = (*data.oc).timestamp;
     auto& config_timestamp = (*data.oc).config_timestamp;
     auto& window = (*data.oc).window;
@@ -393,7 +393,7 @@
     subpixel_order = static_cast<Render::SubPixel>(tmp6);
   }
   if (CaseEq(data_expr, RandR::Notify::OutputProperty)) {
-    data.op.emplace();
+    data.op.emplace(RandR::NotifyEvent::Op{});
     auto& window = (*data.op).window;
     auto& output = (*data.op).output;
     auto& atom = (*data.op).atom;
@@ -421,7 +421,7 @@
     Pad(&buf, 11);
   }
   if (CaseEq(data_expr, RandR::Notify::ProviderChange)) {
-    data.pc.emplace();
+    data.pc.emplace(RandR::NotifyEvent::Pc{});
     auto& timestamp = (*data.pc).timestamp;
     auto& window = (*data.pc).window;
     auto& provider = (*data.pc).provider;
@@ -439,7 +439,7 @@
     Pad(&buf, 16);
   }
   if (CaseEq(data_expr, RandR::Notify::ProviderProperty)) {
-    data.pp.emplace();
+    data.pp.emplace(RandR::NotifyEvent::Pp{});
     auto& window = (*data.pp).window;
     auto& provider = (*data.pp).provider;
     auto& atom = (*data.pp).atom;
@@ -465,7 +465,7 @@
     Pad(&buf, 11);
   }
   if (CaseEq(data_expr, RandR::Notify::ResourceChange)) {
-    data.rc.emplace();
+    data.rc.emplace(RandR::NotifyEvent::Rc{});
     auto& timestamp = (*data.rc).timestamp;
     auto& window = (*data.rc).window;
 
@@ -479,7 +479,7 @@
     Pad(&buf, 20);
   }
   if (CaseEq(data_expr, RandR::Notify::Lease)) {
-    data.lc.emplace();
+    data.lc.emplace(RandR::NotifyEvent::Lc{});
     auto& timestamp = (*data.lc).timestamp;
     auto& window = (*data.lc).window;
     auto& lease = (*data.lc).lease;
diff -r -u chromium-120.0.6099.129old/ui/gfx/x/generated_protos/xinput.cc chromium-120.0.6099.129/ui/gfx/x/generated_protos/xinput.cc
--- chromium-120.0.6099.129old/ui/gfx/x/generated_protos/xinput.cc	2023-12-21 01:49:42.905592700 +0100
+++ chromium-120.0.6099.129/ui/gfx/x/generated_protos/xinput.cc	2023-12-21 16:46:52.355006508 +0100
@@ -566,7 +566,7 @@
       // data
       auto data_expr = type;
       if (CaseEq(data_expr, Input::DeviceClassType::Key)) {
-        data.key.emplace();
+        data.key.emplace(Input::DeviceClass::Key());
         uint16_t num_keys{};
         auto& keys = (*data.key).keys;
         size_t keys_len = keys.size();
@@ -582,7 +582,7 @@
         }
       }
       if (CaseEq(data_expr, Input::DeviceClassType::Button)) {
-        data.button.emplace();
+        data.button.emplace(Input::DeviceClass::Button{});
         uint16_t num_buttons{};
         auto& state = (*data.button).state;
         size_t state_len = state.size();
@@ -607,7 +607,7 @@
         }
       }
       if (CaseEq(data_expr, Input::DeviceClassType::Valuator)) {
-        data.valuator.emplace();
+        data.valuator.emplace(Input::DeviceClass::Valuator{});
         auto& number = (*data.valuator).number;
         auto& label = (*data.valuator).label;
         auto& min = (*data.valuator).min;
@@ -670,7 +670,7 @@
         Pad(&buf, 3);
       }
       if (CaseEq(data_expr, Input::DeviceClassType::Scroll)) {
-        data.scroll.emplace();
+        data.scroll.emplace(Input::DeviceClass::Scroll{});
         auto& number = (*data.scroll).number;
         auto& scroll_type = (*data.scroll).scroll_type;
         auto& flags = (*data.scroll).flags;
@@ -705,7 +705,7 @@
         }
       }
       if (CaseEq(data_expr, Input::DeviceClassType::Touch)) {
-        data.touch.emplace();
+        data.touch.emplace(Input::DeviceClass::Touch{});
         auto& mode = (*data.touch).mode;
         auto& num_touches = (*data.touch).num_touches;
 
@@ -718,7 +718,7 @@
         Read(&num_touches, &buf);
       }
       if (CaseEq(data_expr, Input::DeviceClassType::Gesture)) {
-        data.gesture.emplace();
+        data.gesture.emplace(Input::DeviceClass::Gesture{});
         auto& num_touches = (*data.gesture).num_touches;
 
         // num_touches
@@ -2205,7 +2205,7 @@
       // info
       auto info_expr = class_id;
       if (CaseEq(info_expr, Input::InputClass::Key)) {
-        info.key.emplace();
+        info.key.emplace(Input::InputInfo::Key{});
         auto& min_keycode = (*info.key).min_keycode;
         auto& max_keycode = (*info.key).max_keycode;
         auto& num_keys = (*info.key).num_keys;
@@ -2223,14 +2223,14 @@
         Pad(&buf, 2);
       }
       if (CaseEq(info_expr, Input::InputClass::Button)) {
-        info.button.emplace();
+        info.button.emplace(Input::InputInfo::Button{});
         auto& num_buttons = (*info.button).num_buttons;
 
         // num_buttons
         Read(&num_buttons, &buf);
       }
       if (CaseEq(info_expr, Input::InputClass::Valuator)) {
-        info.valuator.emplace();
+        info.valuator.emplace(Input::InputInfo::Valuator{});
         uint8_t axes_len{};
         auto& mode = (*info.valuator).mode;
         auto& motion_size = (*info.valuator).motion_size;
@@ -3843,7 +3843,7 @@
       // data
       auto data_expr = class_id;
       if (CaseEq(data_expr, Input::FeedbackClass::Keyboard)) {
-        data.keyboard.emplace();
+        data.keyboard.emplace(x11::Input::FeedbackState::Keyboard{});
         auto& pitch = (*data.keyboard).pitch;
         auto& duration = (*data.keyboard).duration;
         auto& led_mask = (*data.keyboard).led_mask;
@@ -3885,7 +3885,7 @@
         }
       }
       if (CaseEq(data_expr, Input::FeedbackClass::Pointer)) {
-        data.pointer.emplace();
+        data.pointer.emplace(x11::Input::FeedbackState::Pointer{});
         auto& accel_num = (*data.pointer).accel_num;
         auto& accel_denom = (*data.pointer).accel_denom;
         auto& threshold = (*data.pointer).threshold;
@@ -3903,7 +3903,7 @@
         Read(&threshold, &buf);
       }
       if (CaseEq(data_expr, Input::FeedbackClass::String)) {
-        data.string.emplace();
+        data.string.emplace(x11::Input::FeedbackState::String{});
         auto& max_symbols = (*data.string).max_symbols;
         uint16_t num_keysyms{};
         auto& keysyms = (*data.string).keysyms;
@@ -3923,7 +3923,7 @@
         }
       }
       if (CaseEq(data_expr, Input::FeedbackClass::Integer)) {
-        data.integer.emplace();
+        data.integer.emplace(x11::Input::FeedbackState::Integer{});
         auto& resolution = (*data.integer).resolution;
         auto& min_value = (*data.integer).min_value;
         auto& max_value = (*data.integer).max_value;
@@ -3938,7 +3938,7 @@
         Read(&max_value, &buf);
       }
       if (CaseEq(data_expr, Input::FeedbackClass::Led)) {
-        data.led.emplace();
+        data.led.emplace(x11::Input::FeedbackState::Led{});
         auto& led_mask = (*data.led).led_mask;
         auto& led_values = (*data.led).led_values;
 
@@ -3949,7 +3949,7 @@
         Read(&led_values, &buf);
       }
       if (CaseEq(data_expr, Input::FeedbackClass::Bell)) {
-        data.bell.emplace();
+        data.bell.emplace(x11::Input::FeedbackState::Bell{});
         auto& percent = (*data.bell).percent;
         auto& pitch = (*data.bell).pitch;
         auto& duration = (*data.bell).duration;
@@ -4769,7 +4769,7 @@
       // data
       auto data_expr = class_id;
       if (CaseEq(data_expr, Input::InputClass::Key)) {
-        data.key.emplace();
+        data.key.emplace(x11::Input::InputState::Key{});
         auto& num_keys = (*data.key).num_keys;
         auto& keys = (*data.key).keys;
         size_t keys_len = keys.size();
@@ -4787,7 +4787,7 @@
         }
       }
       if (CaseEq(data_expr, Input::InputClass::Button)) {
-        data.button.emplace();
+        data.button.emplace(x11::Input::InputState::Button{});
         auto& num_buttons = (*data.button).num_buttons;
         auto& buttons = (*data.button).buttons;
         size_t buttons_len = buttons.size();
@@ -4805,7 +4805,7 @@
         }
       }
       if (CaseEq(data_expr, Input::InputClass::Valuator)) {
-        data.valuator.emplace();
+        data.valuator.emplace(x11::Input::InputState::Valuator{});
         uint8_t num_valuators{};
         auto& mode = (*data.valuator).mode;
         auto& valuators = (*data.valuator).valuators;
@@ -5076,7 +5076,7 @@
     // data
     auto data_expr = control_id;
     if (CaseEq(data_expr, Input::DeviceControl::resolution)) {
-      data.resolution.emplace();
+      data.resolution.emplace(x11::Input::DeviceState::Resolution{});
       uint32_t num_valuators{};
       auto& resolution_values = (*data.resolution).resolution_values;
       size_t resolution_values_len = resolution_values.size();
@@ -5110,7 +5110,7 @@
       }
     }
     if (CaseEq(data_expr, Input::DeviceControl::abs_calib)) {
-      data.abs_calib.emplace();
+      data.abs_calib.emplace(x11::Input::DeviceState::AbsCalib{});
       auto& min_x = (*data.abs_calib).min_x;
       auto& max_x = (*data.abs_calib).max_x;
       auto& min_y = (*data.abs_calib).min_y;
@@ -5145,7 +5145,7 @@
       Read(&button_threshold, &buf);
     }
     if (CaseEq(data_expr, Input::DeviceControl::core)) {
-      data.core.emplace();
+      data.core.emplace(x11::Input::DeviceState::Core{});
       auto& status = (*data.core).status;
       auto& iscore = (*data.core).iscore;
 
@@ -5159,7 +5159,7 @@
       Pad(&buf, 2);
     }
     if (CaseEq(data_expr, Input::DeviceControl::enable)) {
-      data.enable.emplace();
+      data.enable.emplace(x11::Input::DeviceState::Enable{});
       auto& enable = (*data.enable).enable;
 
       // enable
@@ -5169,7 +5169,7 @@
       Pad(&buf, 3);
     }
     if (CaseEq(data_expr, Input::DeviceControl::abs_area)) {
-      data.abs_area.emplace();
+      data.abs_area.emplace(x11::Input::DeviceState::AbsArea{});
       auto& offset_x = (*data.abs_area).offset_x;
       auto& offset_y = (*data.abs_area).offset_y;
       auto& width = (*data.abs_area).width;
@@ -6661,7 +6661,7 @@
           // data
           auto data_expr = type;
           if (CaseEq(data_expr, Input::DeviceClassType::Key)) {
-            data.key.emplace();
+            data.key.emplace(x11::Input::DeviceClass::Key{});
             uint16_t num_keys{};
             auto& keys = (*data.key).keys;
             size_t keys_len = keys.size();
@@ -6677,7 +6677,7 @@
             }
           }
           if (CaseEq(data_expr, Input::DeviceClassType::Button)) {
-            data.button.emplace();
+            data.button.emplace(x11::Input::DeviceClass::Button{});
             uint16_t num_buttons{};
             auto& state = (*data.button).state;
             size_t state_len = state.size();
@@ -6702,7 +6702,7 @@
             }
           }
           if (CaseEq(data_expr, Input::DeviceClassType::Valuator)) {
-            data.valuator.emplace();
+            data.valuator.emplace(x11::Input::DeviceClass::Valuator{});
             auto& number = (*data.valuator).number;
             auto& label = (*data.valuator).label;
             auto& min = (*data.valuator).min;
@@ -6765,7 +6765,7 @@
             Pad(&buf, 3);
           }
           if (CaseEq(data_expr, Input::DeviceClassType::Scroll)) {
-            data.scroll.emplace();
+            data.scroll.emplace(x11::Input::DeviceClass::Scroll{});
             auto& number = (*data.scroll).number;
             auto& scroll_type = (*data.scroll).scroll_type;
             auto& flags = (*data.scroll).flags;
@@ -6800,7 +6800,7 @@
             }
           }
           if (CaseEq(data_expr, Input::DeviceClassType::Touch)) {
-            data.touch.emplace();
+            data.touch.emplace(x11::Input::DeviceClass::Touch{});
             auto& mode = (*data.touch).mode;
             auto& num_touches = (*data.touch).num_touches;
 
@@ -6813,7 +6813,7 @@
             Read(&num_touches, &buf);
           }
           if (CaseEq(data_expr, Input::DeviceClassType::Gesture)) {
-            data.gesture.emplace();
+            data.gesture.emplace(x11::Input::DeviceClass::Gesture{});
             auto& num_touches = (*data.gesture).num_touches;
 
             // num_touches
diff -r -u chromium-120.0.6099.129old/ui/gfx/x/generated_protos/xkb.cc chromium-120.0.6099.129/ui/gfx/x/generated_protos/xkb.cc
--- chromium-120.0.6099.129old/ui/gfx/x/generated_protos/xkb.cc	2023-12-21 01:49:42.905592700 +0100
+++ chromium-120.0.6099.129/ui/gfx/x/generated_protos/xkb.cc	2023-12-21 14:20:44.946209813 +0100
@@ -2345,7 +2345,7 @@
   // map
   auto map_expr = present;
   if (CaseAnd(map_expr, Xkb::MapPart::KeyTypes)) {
-    map.types_rtrn.emplace();
+    map.types_rtrn.emplace(std::vector<Xkb::KeyType>{});
     auto& types_rtrn = *map.types_rtrn;
     size_t types_rtrn_len = types_rtrn.size();
 
@@ -5284,7 +5284,7 @@
   if (CaseAnd(replies_expr, Xkb::GBNDetail::Types) ||
       CaseAnd(replies_expr, Xkb::GBNDetail::ClientSymbols) ||
       CaseAnd(replies_expr, Xkb::GBNDetail::ServerSymbols)) {
-    replies.types.emplace();
+    replies.types.emplace(Xkb::GetKbdByNameReply::Types{});
     auto& getmap_type = (*replies.types).getmap_type;
     auto& typeDeviceID = (*replies.types).typeDeviceID;
     auto& getmap_sequence = (*replies.types).getmap_sequence;
@@ -5716,7 +5716,7 @@
     }
   }
   if (CaseAnd(replies_expr, Xkb::GBNDetail::CompatMap)) {
-    replies.compat_map.emplace();
+    replies.compat_map.emplace(Xkb::GetKbdByNameReply::CompatMap{});
     auto& compatmap_type = (*replies.compat_map).compatmap_type;
     auto& compatDeviceID = (*replies.compat_map).compatDeviceID;
     auto& compatmap_sequence = (*replies.compat_map).compatmap_sequence;
@@ -5840,7 +5840,7 @@
     }
   }
   if (CaseAnd(replies_expr, Xkb::GBNDetail::IndicatorMaps)) {
-    replies.indicator_maps.emplace();
+    replies.indicator_maps.emplace(Xkb::GetKbdByNameReply::IndicatorMaps{});
     auto& indicatormap_type = (*replies.indicator_maps).indicatormap_type;
     auto& indicatorDeviceID = (*replies.indicator_maps).indicatorDeviceID;
     auto& indicatormap_sequence =
@@ -5934,7 +5934,7 @@
   }
   if (CaseAnd(replies_expr, Xkb::GBNDetail::KeyNames) ||
       CaseAnd(replies_expr, Xkb::GBNDetail::OtherNames)) {
-    replies.key_names.emplace();
+    replies.key_names.emplace(Xkb::GetKbdByNameReply::KeyNames{});
     auto& keyname_type = (*replies.key_names).keyname_type;
     auto& keyDeviceID = (*replies.key_names).keyDeviceID;
     auto& keyname_sequence = (*replies.key_names).keyname_sequence;
@@ -6193,7 +6193,7 @@
     }
   }
   if (CaseAnd(replies_expr, Xkb::GBNDetail::Geometry)) {
-    replies.geometry.emplace();
+    replies.geometry.emplace(Xkb::GetKbdByNameReply::Geometry{});
     auto& geometry_type = (*replies.geometry).geometry_type;
     auto& geometryDeviceID = (*replies.geometry).geometryDeviceID;
     auto& geometry_sequence = (*replies.geometry).geometry_sequence;
