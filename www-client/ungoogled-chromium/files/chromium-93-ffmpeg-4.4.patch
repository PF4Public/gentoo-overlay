--- chromium-93.0.4577.63/media/filters/ffmpeg_demuxer.cc.orig	2021-09-07 08:38:33.765397601 +0200
+++ chromium-93.0.4577.63/media/filters/ffmpeg_demuxer.cc	2021-09-07 09:03:32.575927180 +0200
@@ -427,11 +427,19 @@
   scoped_refptr<DecoderBuffer> buffer;
 
   if (type() == DemuxerStream::TEXT) {
+#if defined FF_API_BUFFER_SIZE_T && ! FF_API_BUFFER_SIZE_T
     size_t id_size = 0;
+#else
+    int id_size = 0;
+#endif
     uint8_t* id_data = av_packet_get_side_data(
         packet.get(), AV_PKT_DATA_WEBVTT_IDENTIFIER, &id_size);
 
+#if defined FF_API_BUFFER_SIZE_T && ! FF_API_BUFFER_SIZE_T
     size_t settings_size = 0;
+#else
+    int settings_size = 0;
+#endif
     uint8_t* settings_data = av_packet_get_side_data(
         packet.get(), AV_PKT_DATA_WEBVTT_SETTINGS, &settings_size);
 
@@ -443,7 +451,11 @@
     buffer = DecoderBuffer::CopyFrom(packet->data, packet->size,
                                      side_data.data(), side_data.size());
   } else {
+#if defined FF_API_BUFFER_SIZE_T && ! FF_API_BUFFER_SIZE_T
     size_t side_data_size = 0;
+#else
+    int side_data_size = 0;
+#endif
     uint8_t* side_data = av_packet_get_side_data(
         packet.get(), AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL, &side_data_size);
 
@@ -504,7 +516,11 @@
                                        packet->size - data_offset);
     }
 
+#if defined FF_API_BUFFER_SIZE_T && ! FF_API_BUFFER_SIZE_T
     size_t skip_samples_size = 0;
+#else
+    int skip_samples_size = 0;
+#endif
     const uint32_t* skip_samples_ptr =
         reinterpret_cast<const uint32_t*>(av_packet_get_side_data(
             packet.get(), AV_PKT_DATA_SKIP_SAMPLES, &skip_samples_size));
--- chromium-93.0.4577.63/media/filters/audio_decoder_unittest.cc.orig	2021-09-01 03:39:39.000000000 +0200
+++ chromium-93.0.4577.63/media/filters/audio_decoder_unittest.cc	2021-09-07 09:00:33.311446755 +0200
@@ -109,7 +109,11 @@
   }
 
   // If the timestamp is positive, try to use FFmpeg's discard data.
+#if defined FF_API_BUFFER_SIZE_T && ! FF_API_BUFFER_SIZE_T
   size_t skip_samples_size = 0;
+#else
+  int skip_samples_size = 0;
+#endif
   const uint32_t* skip_samples_ptr =
       reinterpret_cast<const uint32_t*>(av_packet_get_side_data(
           packet, AV_PKT_DATA_SKIP_SAMPLES, &skip_samples_size));
